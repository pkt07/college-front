{"version":3,"sources":["views/Icons/CoreUIIcons/CoreUIIcons.js"],"names":["Forms","props","moneyType","purposeType","state","handleChange","bind","register","handleChangeType","handleChangePType","handleChangeEnroll","this","fetchOptions","fetch","method","headers","then","res","json","values","console","log","setState","enrollType","response","option","pType","value","type","target","enrollment_id","event","comingName","purposeName","description","amount","body","JSON","stringify","Number","studentName","Response","Result","response_code","alert","history","push","className","xs","md","htmlFor","options","onChange","map","index","key","id","size","color","onClick","Component"],"mappings":"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","file":"static/js/54.0795578d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Col,\n  Collapse,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Fade,\n  Form,\n  FormGroup,\n  FormText,\n  FormFeedback,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButtonDropdown,\n  InputGroupText,\n  Label,\n  Row,\n} from 'reactstrap';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nclass Forms extends Component {\n  moneyType = [\"Money Given\", \"Money Taken\"]\n  purposeType = [\"Student\",\"Other\"]\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"type\": null,\n      \"amount\": \"\",\n      \"description\": \"\",\n      \"enrollment_id\": \"\",\n      \"purposeName\": \"\",\n      \"pType\":null,\n      \"enrollType\":[]\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.register = this.register.bind(this);\n    this.handleChangeType = this.handleChangeType.bind(this);\n    this.handleChangePType = this.handleChangePType.bind(this);\n    this.handleChangeEnroll = this.handleChangeEnroll.bind(this);\n  }\n  componentDidMount(){\n    this.fetchOptions()\n}   \n fetchOptions(){\n    fetch('https://api.cedu.in/V2/api/getStudentEnrollment', {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    }).then((res) => {\n            return res.json();\n        }).then((json) => {\n           let values = json;\n            console.log(\"sdafsa\",values)\n            this.setState({enrollType: values.response})\n            console.log(\"SDfsd\",this.state.enrollType);\n        });\n}\n  handleChangePType(option) {\n    this.setState({ pType: option.value });\n  }\n  handleChangeType(option) {\n    this.setState({ type: option.value });\n  }\n  handleChangeEnroll(option) {\n    console.log(\"dsfsd\",option.target.value)\n    this.setState({ enrollment_id: option.target.value});\n      \n      // this.setState({ studentInfo: event.value });\n}\n  handleChange(event, comingName) {\n    if (comingName == 'purposeName') {\n      this.setState({ purposeName: event.target.value });\n    }\n    if (comingName == 'description') {\n      this.setState({ description: event.target.value });\n    }\n    if (comingName == 'amount') {\n      this.setState({ amount: event.target.value });\n    }\n  }\n  register(event) {\n    fetch('https://api.cedu.in/V2/api/addMoney', {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        type: this.state.type,\n        description: this.state.description,\n        amount: Number(this.state.amount),\n        enrollment_id:this.state.enrollment_id,\n        purposeName:this.state.purposeName,\n        studentName:this.state.studentName,\n      })\n    }).then((Response) => Response.json())\n      .then((Result) => {\n        console.log(Result)\n        if (Result.response_code == 200) {\n          alert(\"Expenditure Added successfully\");\n          this.props.history.push(\"/Dashboard\");\n        }\n        else\n          alert('Server error !!!!!Please Try Again');\n      })\n  }\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col xs=\"12\">\n            <Card>\n              <CardHeader>\n                <i className=\"fa fa-edit\"></i>Money Lent Form\n                </CardHeader>\n              <CardBody>\n                <Form className=\"form-horizontal\">\n                <Row>\n                        <Col xs=\"12\" md=\"6\">\n                  <FormGroup>\n                    <Label htmlFor=\"prependedInput\">Money Type</Label>\n                    <div className=\"controls\">\n                      <Dropdown options={this.moneyType} onChange={this.handleChangeType} value={this.state.type} />\n                    </div>\n                  </FormGroup>\n                  </Col>\n                  <Col xs=\"12\" md=\"6\">\n                  <FormGroup>\n                    <Label htmlFor=\"prependedInput\">Purpose Type</Label>\n                    <div className=\"controls\">\n                      <Dropdown options={this.purposeType} onChange={this.handleChangePType} value={this.state.pType} />\n                    </div>\n                  </FormGroup>\n                  </Col>\n                  </Row>\n                  {\n                    this.state.pType === 'Student' ?\n                      <Row>\n                        <Col xs=\"12\" md=\"12\">\n                          <FormGroup>\n                            <Label htmlFor=\"prependedInput\">Student Info</Label>\n                            <div className=\"controls\">\n                            <select className=\"form-control\" onChange={this.handleChangeEnroll}>\n          <option>---select---</option>\n            {\n            this.state.enrollType.map((option, index) => \n            (<option key={index} value={option.enrollment_id}>{option.enrollment_id}</option>))\n            }\n</select>\n                              {/* <Dropdown options={\n                                \n                                // this.state.enrollType.map((option) => {option.name})\n                                this.state.options.map((option, key) => <option key={key} />{option})\n                                \n                                } onChange={this.handleChangeEnroll} value={this.state.studentInfo}/> */}\n                            </div>\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                      :null\n                  }\n                  <Row>\n                  <Col xs=\"12\" md=\"6\">\n                      <FormGroup>\n                        <Label htmlFor=\"prependedInput\">Purpose Name</Label>\n                        <div className=\"controls\">\n                          <Input id=\"appendedInput\" size=\"16\" type=\"text\" onChange={(event) => { this.handleChange(event, 'purposeName') }} />\n                        </div>\n                      </FormGroup>\n                    </Col>\n                    <Col xs=\"12\" md=\"6\">\n                      <FormGroup>\n                        <Label htmlFor=\"prependedInput\">Amount</Label>\n                        <div className=\"controls\">\n                          <Input id=\"appendedInput\" size=\"16\" type=\"text\" onChange={(event) => { this.handleChange(event, 'amount') }} />\n                        </div>\n                      </FormGroup>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs=\"12\" md=\"12\">\n                      <FormGroup>\n                        <Label htmlFor=\"prependedInput\">Description</Label>\n                        <div className=\"controls\">\n                          <Input id=\"appendedInput\" size=\"16\" type=\"textarea\" onChange={(event) => { this.handleChange(event, 'description') }} />\n                        </div>\n                      </FormGroup>\n                    </Col>\n                  </Row>\n                  <div className=\"form-actions\">\n                    <Button type=\"submit\" color=\"primary\" onClick={this.register}>Save changes</Button>\n                    <Button color=\"secondary\">Cancel</Button>\n                  </div>\n                </Form>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div >\n    );\n  }\n}\n\nexport default Forms;\n"],"sourceRoot":""}